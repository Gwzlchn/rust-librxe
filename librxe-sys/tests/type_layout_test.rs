use librxe_sys::types::*;

/// These tests are checking the memebr layout and size of rxe_* structs
/// Generated by bindgen

// rxe_av struct
#[test]
fn bindgen_test_layout_rxe_av_gid_addr_union() {
    assert_eq!(
        ::std::mem::size_of::<rxe_av_gid_addr_union_t>(),
        28usize,
        concat!("Size of: ", stringify!(rxe_av_gid_addr_union))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_av_gid_addr_union_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rxe_av_gid_addr_union))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_av_gid_addr_union_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr)._sockaddr_in) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_av_gid_addr_union),
            "::",
            stringify!(_sockaddr_in)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_av_gid_addr_union_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr)._sockaddr_in6) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_av_gid_addr_union),
            "::",
            stringify!(_sockaddr_in6)
        )
    );
}

#[test]
fn bindgen_test_layout_rxe_av() {
    assert_eq!(
        ::std::mem::size_of::<rxe_av>(),
        88usize,
        concat!("Size of: ", stringify!(rxe_av))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_av>(),
        8usize,
        concat!("Alignment of ", stringify!(rxe_av))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_av>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_av),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_av>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).network_type) as usize - ptr as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_av),
            "::",
            stringify!(network_type)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_av>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).dmac) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_av),
            "::",
            stringify!(dmac)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_av>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).grh) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_av),
            "::",
            stringify!(grh)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_av>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).sgid_addr) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_av),
            "::",
            stringify!(sgid_addr)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_av>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).dgid_addr) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_av),
            "::",
            stringify!(dgid_addr)
        )
    );
}

// rxe_send_wr struct
#[test]
fn bindgen_test_layout_rxe_send_wr_ex_union_t() {
    assert_eq!(
        ::std::mem::size_of::<rxe_send_wr_ex_union_t>(),
        4usize,
        concat!("Size of: ", stringify!(rxe_send_wr_ex_union_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_send_wr_ex_union_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rxe_send_wr_ex_union_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).imm_data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_t),
            "::",
            stringify!(imm_data)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).invalidate_rkey) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_t),
            "::",
            stringify!(invalidate_rkey)
        )
    );
}

#[test]
fn bindgen_test_layout_rxe_send_wr_ex_union_rdma_t() {
    assert_eq!(
        ::std::mem::size_of::<rxe_send_wr_ex_union_rdma_t>(),
        16usize,
        concat!("Size of: ", stringify!(rxe_send_wr_ex_union_rdma_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_send_wr_ex_union_rdma_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rxe_send_wr_ex_union_rdma_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_rdma_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).remote_addr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_rdma_t),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_rdma_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_rdma_t),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_rdma_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_rdma_t),
            "::",
            stringify!(reserved)
        )
    );
}

#[test]
fn bindgen_test_layout_rxe_send_wr_ex_union_atomic_t() {
    assert_eq!(
        ::std::mem::size_of::<rxe_send_wr_ex_union_atomic_t>(),
        32usize,
        concat!("Size of: ", stringify!(rxe_send_wr_ex_union_atomic_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_send_wr_ex_union_atomic_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rxe_send_wr_ex_union_atomic_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_atomic_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).remote_addr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_atomic_t),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_atomic_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).compare_add) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_atomic_t),
            "::",
            stringify!(compare_add)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_atomic_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).swap) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_atomic_t),
            "::",
            stringify!(swap)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_atomic_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_atomic_t),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_atomic_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_atomic_t),
            "::",
            stringify!(reserved)
        )
    );
}

#[test]
fn bindgen_test_layout_rxe_send_wr_ex_union_ud_t() {
    assert_eq!(
        ::std::mem::size_of::<rxe_send_wr_ex_union_ud_t>(),
        120usize,
        concat!("Size of: ", stringify!(rxe_send_wr_ex_union_ud_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_send_wr_ex_union_ud_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rxe_send_wr_ex_union_ud_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_ud_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).remote_qpn) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_ud_t),
            "::",
            stringify!(remote_qpn)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_ud_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).remote_qkey) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_ud_t),
            "::",
            stringify!(remote_qkey)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_ud_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).pkey_index) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_ud_t),
            "::",
            stringify!(pkey_index)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_ud_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_ud_t),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_ud_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).ah_num) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_ud_t),
            "::",
            stringify!(ah_num)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_ud_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_ud_t),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_ud_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).av) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_ud_t),
            "::",
            stringify!(av)
        )
    );
}

#[test]
fn bindgen_test_layout_rxe_send_wr_ex_union_mw_t() {
    assert_eq!(
        ::std::mem::size_of::<rxe_send_wr_ex_union_mw_t>(),
        32usize,
        concat!("Size of: ", stringify!(rxe_send_wr_ex_union_mw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_send_wr_ex_union_mw_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rxe_send_wr_ex_union_mw_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_mw_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_mw_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_mw_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_mw_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_mw_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).mr_lkey) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_mw_t),
            "::",
            stringify!(mr_lkey)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_mw_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).mw_rkey) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_mw_t),
            "::",
            stringify!(mw_rkey)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_mw_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_mw_t),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_ex_union_mw_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_ex_union_mw_t),
            "::",
            stringify!(access)
        )
    );
}

#[test]
fn bindgen_test_layout_rxe_send_wr_wr_union_t() {
    assert_eq!(
        ::std::mem::size_of::<rxe_send_wr_wr_union_t>(),
        120usize,
        concat!("Size of: ", stringify!(rxe_send_wr_wr_union_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_send_wr_wr_union_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rxe_send_wr_wr_union_t))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_wr_union_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).rdma) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_wr_union_t),
            "::",
            stringify!(rdma)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_wr_union_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).atomic) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_wr_union_t),
            "::",
            stringify!(atomic)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_wr_union_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).ud) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_wr_union_t),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr_wr_union_t>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).mw) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr_wr_union_t),
            "::",
            stringify!(mw)
        )
    );
}

#[test]
fn bindgen_test_layout_rxe_send_wr() {
    assert_eq!(
        ::std::mem::size_of::<rxe_send_wr>(),
        144usize,
        concat!("Size of: ", stringify!(rxe_send_wr))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_send_wr>(),
        8usize,
        concat!("Alignment of ", stringify!(rxe_send_wr))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).num_sge) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr),
            "::",
            stringify!(num_sge)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).send_flags) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr),
            "::",
            stringify!(send_flags)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).ex) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr),
            "::",
            stringify!(ex)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wr>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).wr) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wr),
            "::",
            stringify!(wr)
        )
    );
}

#[test]
fn bindgen_test_layout_rxe_send_wqe() {
    assert_eq!(
        ::std::mem::size_of::<rxe_send_wqe>(),
        208usize,
        concat!("Size of: ", stringify!(rxe_send_wqe))
    );
    assert_eq!(
        ::std::mem::align_of::<rxe_send_wqe>(),
        8usize,
        concat!("Alignment of ", stringify!(rxe_send_wqe))
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).wr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(wr)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).iova) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(iova)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).first_psn) as usize - ptr as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(first_psn)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).last_psn) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(last_psn)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).ack_length) as usize - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(ack_length)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).ssn) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(ssn)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).has_rd_atomic) as usize - ptr as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(has_rd_atomic)
        )
    );
    assert_eq!(
        unsafe {
            let uninit = ::std::mem::MaybeUninit::<rxe_send_wqe>::uninit();
            let ptr = uninit.as_ptr();
            ::std::ptr::addr_of!((*ptr).dma) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rxe_send_wqe),
            "::",
            stringify!(dma)
        )
    );
}
